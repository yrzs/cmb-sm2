// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CmbSm2Client is the client API for CmbSm2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CmbSm2Client interface {
	GetSign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignRep, error)
	VerifySign(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRep, error)
}

type cmbSm2Client struct {
	cc grpc.ClientConnInterface
}

func NewCmbSm2Client(cc grpc.ClientConnInterface) CmbSm2Client {
	return &cmbSm2Client{cc}
}

func (c *cmbSm2Client) GetSign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignRep, error) {
	out := new(SignRep)
	err := c.cc.Invoke(ctx, "/cmbsm2.CmbSm2/GetSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cmbSm2Client) VerifySign(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyRep, error) {
	out := new(VerifyRep)
	err := c.cc.Invoke(ctx, "/cmbsm2.CmbSm2/VerifySign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CmbSm2Server is the server API for CmbSm2 service.
// All implementations must embed UnimplementedCmbSm2Server
// for forward compatibility
type CmbSm2Server interface {
	GetSign(context.Context, *SignReq) (*SignRep, error)
	VerifySign(context.Context, *VerifyReq) (*VerifyRep, error)
	mustEmbedUnimplementedCmbSm2Server()
}

// UnimplementedCmbSm2Server must be embedded to have forward compatible implementations.
type UnimplementedCmbSm2Server struct {
}

func (UnimplementedCmbSm2Server) GetSign(context.Context, *SignReq) (*SignRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSign not implemented")
}
func (UnimplementedCmbSm2Server) VerifySign(context.Context, *VerifyReq) (*VerifyRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySign not implemented")
}
func (UnimplementedCmbSm2Server) mustEmbedUnimplementedCmbSm2Server() {}

// UnsafeCmbSm2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CmbSm2Server will
// result in compilation errors.
type UnsafeCmbSm2Server interface {
	mustEmbedUnimplementedCmbSm2Server()
}

func RegisterCmbSm2Server(s grpc.ServiceRegistrar, srv CmbSm2Server) {
	s.RegisterService(&CmbSm2_ServiceDesc, srv)
}

func _CmbSm2_GetSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmbSm2Server).GetSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmbsm2.CmbSm2/GetSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmbSm2Server).GetSign(ctx, req.(*SignReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CmbSm2_VerifySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmbSm2Server).VerifySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmbsm2.CmbSm2/VerifySign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmbSm2Server).VerifySign(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CmbSm2_ServiceDesc is the grpc.ServiceDesc for CmbSm2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CmbSm2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cmbsm2.CmbSm2",
	HandlerType: (*CmbSm2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSign",
			Handler:    _CmbSm2_GetSign_Handler,
		},
		{
			MethodName: "VerifySign",
			Handler:    _CmbSm2_VerifySign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
